# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y6SYVK2GCbgSFfYXqSb5PXjACqrZxOD3
"""

from flask import Flask, render_template, request
import os
import requests
import pgeocode
import openai

app = Flask(__name__)

# Function to get latitude and longitude from a postal code
def get_lat_long(postal_code):
    nomi = pgeocode.Nominatim('us')
    location = nomi.query_postal_code(postal_code)
    if location["latitude"] is None or location["longitude"] is None:
        raise ValueError("Postal Code not found")
    return location["latitude"], location["longitude"]

# Function to get NOAA weather data
def get_noaa_weather(latitude, longitude):
    base_url = "https://api.weather.gov/points"
    try:
        points_url = f"{base_url}/{latitude},{longitude}"
        points_response = requests.get(points_url)
        points_response.raise_for_status()

        points_data = points_response.json()
        forecast_url = points_data["properties"]["forecast"]

        forecast_response = requests.get(forecast_url)
        forecast_response.raise_for_status()

        return forecast_response.json()
    except requests.exceptions.RequestException as e:
        return {"error": f"Request error: {str(e)}"}

# Function to determine flip-flop suitability
def determine_flip_flop_suitability(weather_data):
    if "error" in weather_data:
        return weather_data["error"]

    forecast = weather_data["properties"]["periods"][0]
    weather_details = {
        "temperature": forecast["temperature"],
        "unit": forecast["temperatureUnit"],
        "forecast": forecast["shortForecast"]
    }

    prompt = f"""
    The current weather details are as follows:
    Temperature: {weather_details['temperature']}Â°{weather_details['unit']}
    Conditions: {weather_details['forecast']}
    Based on this, suggest whether flip-flops are appropriate. If not, recommend alternative footwear.
    """

    try:
        openai.api_key = os.getenv("OPENAI_API_KEY")
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are a fashion assistant offering weather-based footwear advice."},
                {"role": "user", "content": prompt}
            ]
        )
        return response['choices'][0]['message']['content']
    except Exception as e:
        return f"Error with GPT model: {e}"

@app.route("/", methods=["GET", "POST"])
def home():
    if request.method == "POST":
        zip_code = request.form.get("zip_code")
        try:
            latitude, longitude = get_lat_long(zip_code)
            weather_data = get_noaa_weather(latitude, longitude)
            result = determine_flip_flop_suitability(weather_data)
            return render_template("index.html", result=result)
        except Exception as e:
            return render_template("index.html", result=f"Error: {str(e)}")
    return render_template("index.html", result=None)

if __name__ == "__main__":
    app.run(debug=True)